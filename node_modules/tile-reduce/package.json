{
  "name": "tile-reduce",
  "version": "3.0.2",
  "description": "vector tile mapreduce",
  "main": "src/index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "eslint src test examples/*/*.js && tap -R spec test/test.*.js",
    "cover": "tap test/test.*.js --cov --coverage-report=lcov",
    "lint": "eslint src test examples/*/*.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mapbox/tile-reduce.git"
  },
  "author": {
    "name": "morganherlocker"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/mapbox/tile-reduce/issues"
  },
  "homepage": "https://github.com/mapbox/tile-reduce",
  "dependencies": {
    "binary-split": "^1.0.0",
    "function-rate-limit": "^1.0.1",
    "mbtiles": "^0.8.2",
    "pbf": "^1.3.5",
    "queue-async": "^1.0.7",
    "request": "^2.67.0",
    "stream-array": "^1.1.1",
    "through2": "^2.0.0",
    "tile-cover": "^3.0.1",
    "tilebelt": "^1.0.1",
    "turf-bbox-polygon": "^1.0.1",
    "vector-tile": "^1.1.3"
  },
  "devDependencies": {
    "eslint": "^1.10.2",
    "eslint-config-mourner": "^1.0.1",
    "split": "^1.0.0",
    "tap": "^2.3.1"
  },
  "eslintConfig": {
    "extends": "mourner",
    "rules": {
      "indent": [
        2,
        2
      ],
      "camelcase": 0,
      "space-before-function-paren": [
        2,
        "never"
      ]
    }
  },
  "readme": "# TileReduce\n\n[![Build Status](https://travis-ci.org/mapbox/tile-reduce.svg)](https://travis-ci.org/mapbox/tile-reduce)\n\nTileReduce is a geoprocessing library that implements [MapReduce](http://en.wikipedia.org/wiki/MapReduce) to let you run scalable distributed spatial analysis using [Javascript](http://nodejs.org/) and [Mapbox Vector Tiles](https://www.mapbox.com/developers/vector-tiles/). TileReduce coordinates tasks across all available processors on a machine, so your analysis runs lightning fast.\n\n## Install\n\n```sh\nnpm install tile-reduce\n```\n\n## Usage\n\nA TileReduce processor is composed of two parts; the \"map\" script and the \"reduce\" script. The \"map\" portion comprises the expensive processing you want to distribute, while the \"reduce\" script comprises the quick aggregation step.\n\n### 'map' script\n\nThe map script operates on each individual tile. It's purpose is to receive one tile at a time, do analysis or processing on the tile, and write data and send results to the reduce script.\n\n[See the count example processor's map script](https://github.com/mapbox/tile-reduce/blob/master/examples/count/count.js)\n\n### 'reduce' script\n\nThe reduce script serves both to initialize TileReduce with job options, and to handle reducing results returned by the map script for each tile.\n\n[See the count example processor's reduce script](https://github.com/mapbox/tile-reduce/blob/master/examples/count/index.js)\n\n\n## Options\n\n### Basic Options\n\n#### zoom\n\n`zoom` specifies the zoom level of tiles to retrieve from each source.\n\n```js\ntilereduce({\n\tzoom: 15,\n\t// ...\n})\n```\n\n#### map\n\nPath to the map script, which will be executed against each tile\n\n```js\ntilereduce({\n\tmap: path.join(__dirname, 'map.js')\n\t// ...\n})\n```\n#### maxWorkers\n\nBy default, TileReduce creates one worker process per CPU. `maxWorkers` may be used to limit the number of workers created\n\n```js\ntilereduce({\n  maxWorkers: 3,\n  // ...\n})\n```\n\n#### output\n\nBy default, any data written from workers is piped to `process.stdout` on the main process. You can pipe to an alternative writable stream using the `output` option.\n\n```js\ntilereduce({\n\toutput: fs.createWriteStream('output-file'),\n\t// ...\n})\n```\n\n#### log\n\nDisables logging and progress output\n\n```js\ntilereduce({\n\tlog: false,\n\t// ...\n})\n```\n\n#### mapOptions\n\nPasses through arbitrary options to workers. Options are made available to map scripts as `global.mapOptions`\n\n```js\ntilereduce({\n\tmapOptions: {\n\t\tbufferSize: 4\n\t}\n\t// ...\n})\n```\n\n\n\n---\n### Specifying Sources\n\nSources are specified as an array in the `sources` option:\n\n```js\ntilereduce({\n\tsources: [\n\t\t/* source objects */\n\t],\n\t// ...\n})\n```\n\n#### MBTiles\n\n```js\nsources: [\n  {\n    name: 'osmdata',\n    mbtiles: __dirname+'/latest.planet.mbtiles',\n    layers: ['osm']\n  }\n]\n```\n\n[MBTiles](https://github.com/mapbox/mbtiles-spec) work well for optimizing tasks that request many tiles, since the data is stored on disk. Create your own MBTiles from vector data using [tippecanoe](https://github.com/mapbox/tippecanoe), or use [OSM QA Tiles](http://osmlab.github.io/osm-qa-tiles/), a continuously updated MBTiles representation of OpenStreetMap.\n\n#### URL\n\nRemote Vector Tile sources accessible over HTTP work well for mashups of datasets and datasets that would not be practical to fit on a single machine. Be aware that HTTP requests are slower than mbtiles, and throttling is typically required to avoid disrupting servers at high tile volumes. `maxrate` dictates how many requests per second will be made to each remote source.\n\n```js\nsources: [\n  {\n    name: 'streets',\n    url: 'https://b.tiles.mapbox.com/v4/mapbox.mapbox-streets-v6/{z}/{x}/{y}.vector.pbf',\n    layers: ['roads'],\n    maxrate: 10\n  }\n]\n```\n\n#### raw\n\nBy default, sources will be automatically converted from their raw Vector Tile representation to GeoJSON. If you set `raw: true` in an MBTiles or URL source, the [raw Vector Tile data](https://github.com/mapbox/vector-tile-js) will be provided, allowing you to lazily parse features as needed. This is useful in some situations for maximizing performance.\n\n```js\nsources: [\n  {\n    name: 'streets',\n    url: 'https://b.tiles.mapbox.com/v4/mapbox.mapbox-streets-v6/{z}/{x}/{y}.vector.pbf',\n    raw: true\n  }\n]\n```\n\n---\n\n### Specifying Job Area\n\nJobs run over a geographic region represented by a set of tiles. TileReduce also accepts several area definitions that will be automatically converted into tiles.\n\n#### BBOX\n\nA valid [bounding box](http://geojson.org/geojson-spec.html#bounding-boxes) array.\n\n```js\ntilereduce({\n\tbbox: [w, s, e, n],\n\t// ...\n})\n```\n\n#### GeoJSON\n\nA valid [GeoJSON geometry](http://geojson.org/geojson-spec.html#geojson-objects) of any type.\n\n```js\ntilereduce({\n\tgeojson: {\"type\": \"Polygon\", \"coordinates\": [/* coordinates */]},\n\t// ...\n})\n```\n\n#### Tile Array\n\nAn array of [quadtiles](https://msdn.microsoft.com/en-us/library/bb259689.aspx) represented as xyz arrays.\n\n```js\ntilereduce({\n\ttiles: [\n\t\t[x, y, z]\n\t],\n\t// ...\n})\n```\n\n#### Tile Stream\n\nTiles can be read from an object mode [node stream](https://nodejs.org/api/stream.html). Each object in the stream should be either a string in the format `x y z` or an array in the format `[x, y, z]`.\n\n```js\ntilereduce({\n\ttileStream: /* an object mode node stream */,\n\t// ...\n})\n```\n\nLine separated tile list files can easily be converted into the appropriate object mode streams using [binary-split](https://github.com/maxogden/binary-split):\n\n```js\nvar split = require('binary-split'),\n\tfs = require('fs');\n\ntilereduce({\n\ttileStream: fs.createReadStream('/path/to/tile-file').pipe(split()),\n\t// ...\n})\n```\n\n#### Source Cover\n\nWhen using MBTiles sources, a list of tiles to process can be automatically retrieved from the source metadata\n\n```js\ntilereduce({\n\tsourceCover: 'osmdata',\n\tsources: [\n\t\t{\n\t\t\tname: 'osmdata',\n\t\t\tmbtiles: __dirname+'/latest.planet.mbtiles'\n\t\t}\n\t]\n\t// ...\n})\n```\n\n## Events\n\nTileReduce returns an [EventEmitter]().\n\n### start\n\nFired once all workers are initialized and before the first tiles are sent for processing\n\n```js\ntilereduce({/* ... */})\n.on('start', function () {\n\tconsole.log('starting');\n});\n```\n\n### map \n\nFired just before a tile is sent to a worker. Receives the tile and worker number assigned to process the tile.\n\n```js\ntilereduce({/* ... */})\n.on('map', function (tile, workerId) {\n\tconsole.log('about to process ' + JSON.stringify(tile) +' on worker '+workerId);\n});\n```\n\n### reduce \n\nFired when a tile has finished processing. Receives data returned in the map function's `done` callback (if any), and the tile.\n\n```js\nvar count = 0;\ntilereduce({/* ... */})\n.on('reduce', function (result, tile) { \n\tconsole.log('got a count of ' + result + ' from ' + JSON.stringify(tile));\n\tcount++;\n});\n```\n\n### end\n\nFired when all queued tiles have been processed. Use this event to output final reduce results.\n\n```js\nvar count = 0;\ntilereduce({/* ... */})\n.on('end', function () {\n\tconsole.log('Total count was: ' + count);\n});\n```\n\n## Processor Examples\n\n- [osm-coverage](https://github.com/mapbox/osm-coverage) - a processor for computing statistics about [OpenStreetMap](http://www.openstreetmap.org/) coverage across countries.\n\n- [osm-sidewalker](https://github.com/mapbox/osm-sidewalker) - a processor for detecting potentially untagged sidewalks in [OpenStreetMap](http://www.openstreetmap.org/).\n\n## Development\n\n### Testing\n\n```sh\nnpm test\n```\n\n### Linting\n\n```sh\nnpm run lint\n```\n\n### Test Coverage\n\n```sh\nnpm run cover\n```\n",
  "readmeFilename": "README.md",
  "_id": "tile-reduce@3.0.2",
  "_shasum": "5bff156240d6562e448696d2882840a8e61723f6",
  "_resolved": "git://github.com/mapbox/tile-reduce.git#5aaf09f9b196f4d5fe0fda9f76884e75b7c37db8",
  "_from": "tile-reduce@git://github.com/mapbox/tile-reduce.git#5aaf09f9b196f4d5fe0fda9f76884e75b7c37db8"
}
